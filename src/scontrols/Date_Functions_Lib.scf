<script type="text/javascript">
   /*

	Name: jsDate
	Desc: VBScript native Date functions emulated for Javascript
	Author: Rob Eberhardt, Slingshot Solutions - http://slingfive.com/
	History:
		2005-08-04	v0.94		scrapped new dateDiff approach to better match VBScript's simplistic Y/M/Q
		2005-08-03	v0.93		fixed dateDiff/leapyear bug with yyyy/m/q intervals
		2004-11-26	v0.91		fixed datePart/ww bug, added weekdayName() & monthName()
		2004-08-30	v0.9		brand new
		
	*/
	
	// used by dateAdd, dateDiff, datePart, weekdayName, and monthName
	// note: less strict than VBScript's isDate, since JS allows invalid dates to overflow (e.g. Jan 32 transparently becomes Feb 1)
	function isDate(p_Expression){
		return !isNaN(new Date(p_Expression));		// <<--- this needs checking
	}


	// REQUIRES: isDate()
	function dateAdd(p_Interval, p_Number, p_Date){
		if(!isDate(p_Date)){return "invalid date: '" + p_Date + "'";}
		if(isNaN(p_Number)){return "invalid number: '" + p_Number + "'";}	
	
		p_Number = new Number(p_Number);
		var dt = new Date(p_Date);
		switch(p_Interval.toLowerCase()){
			case "yyyy": {// year
				dt.setFullYear(dt.getFullYear() + p_Number);
				break;
			}
			case "q": {		// quarter
				dt.setMonth(dt.getMonth() + (p_Number*3));
				break;
			}
			case "m": {		// month
				dt.setMonth(dt.getMonth() + p_Number);
				break;
			}
			case "y":		// day of year
			case "d":		// day
			case "w": {		// weekday
				dt.setDate(dt.getDate() + p_Number);
				break;
			}
			case "ww": {	// week of year
				dt.setDate(dt.getDate() + (p_Number*7));
				break;
			}
			case "h": {		// hour
				dt.setHours(dt.getHours() + p_Number);
				break;
			}
			case "n": {		// minute
				dt.setMinutes(dt.getMinutes() + p_Number);
				break;
			}
			case "s": {		// second
				dt.setSeconds(dt.getSeconds() + p_Number);
				break;
			}
			case "ms": {		// second
				dt.setMilliseconds(dt.getMilliseconds() + p_Number);
				break;
			}
			default: {
				return "invalid interval: '" + p_Interval + "'";
			}
		}
		return dt;
	}
	
	
	
	// REQUIRES: isDate()
	// NOT SUPPORTED: firstdayofweek and firstweekofyear (defaults for both)
	function dateDiff(p_Interval, p_Date1, p_Date2, p_firstdayofweek, p_firstweekofyear){
		if(!isDate(p_Date1)){return "invalid date: '" + p_Date1 + "'";}
		if(!isDate(p_Date2)){return "invalid date: '" + p_Date2 + "'";}
		var dt1 = new Date(p_Date1);
		var dt2 = new Date(p_Date2);
	
		// get ms between dates (UTC) and make into "difference" date
		var iDiffMS = dt2.valueOf() - dt1.valueOf();
		var dtDiff = new Date(iDiffMS);
	
		// calc various diffs
		var nYears  = dt2.getUTCFullYear() - dt1.getUTCFullYear();
		var nMonths = dt2.getUTCMonth() - dt1.getUTCMonth() + (nYears!=0 ? nYears*12 : 0);
		var nQuarters = parseInt(nMonths/3);	//<<-- different than VBScript, which watches rollover not completion
		
		var nMilliseconds = iDiffMS;
		var nSeconds = parseInt(iDiffMS/1000);
		var nMinutes = parseInt(nSeconds/60);
		var nHours = parseInt(nMinutes/60);
		var nDays  = parseInt(nHours/24);
		var nWeeks = parseInt(nDays/7);
	
	
		// return requested difference
		var iDiff = 0;		
		switch(p_Interval.toLowerCase()){
			case "yyyy": return nYears;
			case "q": return nQuarters;
			case "m": return nMonths;
			case "y": 		// day of year
			case "d": return nDays;
			case "w": return nDays;
			case "ww":return nWeeks;		// week of year	// <-- inaccurate, WW should count calendar weeks (# of sundays) between
			case "h": return nHours;
			case "n": return nMinutes;
			case "s": return nSeconds;
			case "ms":return nMilliseconds;	// millisecond	// <-- extension for JS, NOT available in VBScript
			default: return "invalid interval: '" + p_Interval + "'";
		}
	}
	
	
	
	// REQUIRES: isDate(), dateDiff()
	// NOT SUPPORTED: firstdayofweek and firstweekofyear (does system default for both)
	function datePart(p_Interval, p_Date, p_firstdayofweek, p_firstweekofyear){
		if(!isDate(p_Date)){return "invalid date: '" + p_Date + "'";}
	
		var dtPart = new Date(p_Date);
		switch(p_Interval.toLowerCase()){
			case "yyyy": return dtPart.getFullYear();
			case "q": return parseInt(dtPart.getMonth()/3)+1;
			case "m": return dtPart.getMonth()+1;
			case "y": return dateDiff("y", "1/1/" + dtPart.getFullYear(), dtPart);			// day of year
			case "d": return dtPart.getDate();
			case "w": return dtPart.getDay();	// weekday
			case "ww":return dateDiff("ww", "1/1/" + dtPart.getFullYear(), dtPart);		// week of year
			case "h": return dtPart.getHours();
			case "n": return dtPart.getMinutes();
			case "s": return dtPart.getSeconds();
			case "ms":return dtPart.getMilliseconds();	// millisecond	// <-- extension for JS, NOT available in VBScript
			default: return "invalid interval: '" + p_Interval + "'";
		}
	}
	
	
	// REQUIRES: isDate()
	// NOT SUPPORTED: firstdayofweek (does system default)
	function weekdayName(p_Date, p_abbreviate){
		if(!isDate(p_Date)){return "invalid date: '" + p_Date + "'";}
		var dt = new Date(p_Date);
		var retVal = dt.toString().split(' ')[0];
		var retVal = Array('Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday')[dt.getDay()];
		if(p_abbreviate==true){retVal = retVal.substring(0, 3)}	// abbr to 1st 3 chars
		return retVal;
	}
	// REQUIRES: isDate()
	function monthName(p_Date, p_abbreviate){
		if(!isDate(p_Date)){return "invalid date: '" + p_Date + "'";}
		var dt = new Date(p_Date);	
		var retVal = Array('January','February','March','April','May','June','July','August','September','October','November','December')[dt.getMonth()];
		if(p_abbreviate==true){retVal = retVal.substring(0, 3)}	// abbr to 1st 3 chars
		return retVal;
	}
	
	
	// bootstrap different capitalizations
	function IsDate(p_Expression){
		return isDate(p_Expression);
	}
	function DateAdd(p_Interval, p_Number, p_Date){
		return dateAdd(p_Interval, p_Number, p_Date);
	}
	function DateDiff(p_interval, p_date1, p_date2, p_firstdayofweek, p_firstweekofyear){
		return dateDiff(p_interval, p_date1, p_date2, p_firstdayofweek, p_firstweekofyear);
	}
	function DatePart(p_Interval, p_Date, p_firstdayofweek, p_firstweekofyear){
		return datePart(p_Interval, p_Date, p_firstdayofweek, p_firstweekofyear);
	}
	function WeekdayName(p_Date){
		return weekdayName(p_Date);
	}
	function MonthName(p_Date){
		return monthName(p_Date);
	}
	
	IsDate = function(p_Expression){	return !isNaN(new Date(p_Expression));};
	DateAdd = function(p_Interval, p_Number, p_Date){if(!IsDate(p_Date)){return "invalid date: '" + p_Date + "'";}if(isNaN(p_Number)){return "invalid number: '" + p_Number + "'";}	p_Number = new Number(p_Number);var dt = new Date(p_Date);switch(p_Interval.toLowerCase()){case "yyyy": {dt.setFullYear(dt.getFullYear() + p_Number);break;}case "q": {dt.setMonth(dt.getMonth() + (p_Number*3));break;}case "m": {dt.setMonth(dt.getMonth() + p_Number);break;}case "y":case "d":case "w": {dt.setDate(dt.getDate() + p_Number);break;}case "ww": {dt.setDate(dt.getDate() + (p_Number*7));break;}case "h": {dt.setHours(dt.getHours() + p_Number);break;}case "n": {dt.setMinutes(dt.getMinutes() + p_Number);break;}case "s": {dt.setSeconds(dt.getSeconds() + p_Number);break;}case "ms": {dt.setMilliseconds(dt.getMilliseconds() + p_Number);break;}default: {return "invalid interval: '" + p_Interval + "'";}}return dt;};
	GetDateFromFormat = function(val,format) {val=val+"";format=format+"";var i_val=0;var i_format=0;var c="";var token="";var token2="";var x,y;var now=new Date();var year=now.getYear();var month=now.getMonth()+1;var date=1;var hh=now.getHours();var mm=now.getMinutes();var ss=now.getSeconds();var ampm="";while (i_format < format.length) {c=format.charAt(i_format);token="";while ((format.charAt(i_format)==c) && (i_format < format.length)) {token += format.charAt(i_format++);}if (token=="yyyy" || token=="yy" || token=="y") {if (token=="yyyy") { x=4;y=4; }if (token=="yy")   { x=2;y=2; }if (token=="y")    { x=2;y=4; }year=GetInt(val,i_val,x,y);if (year==null) { return 0; }i_val += year.length;if (year.length==2) {if (year > 70) { year=1900+(year-0); }else { year=2000+(year-0); }}}else if (token=="MMM"||token=="NNN"){month=0;for (var i=0; i<MONTH_NAMES.length; i++) {var month_name=MONTH_NAMES[i];if (val.substring(i_val,i_val+month_name.length).toLowerCase()==month_name.toLowerCase()) {if (token=="MMM"||(token=="NNN"&&i>11)) {month=i+1;if (month>12) { month -= 12; }i_val += month_name.length;break;}}}if ((month < 1)||(month>12)){return 0;}}else if (token=="EE"||token=="E"){for (var i=0; i<DAY_NAMES.length; i++) {var day_name=DAY_NAMES[i];if (val.substring(i_val,i_val+day_name.length).toLowerCase()==day_name.toLowerCase()) {i_val += day_name.length;break;}}}else if (token=="MM"||token=="M") {month=GetInt(val,i_val,token.length,2);if(month==null||(month<1)||(month>12)){return 0;}i_val+=month.length;}else if (token=="dd"||token=="d") {date=GetInt(val,i_val,token.length,2);if(date==null||(date<1)||(date>31)){return 0;}i_val+=date.length;}else if (token=="hh"||token=="h") {hh=GetInt(val,i_val,token.length,2);if(hh==null||(hh<1)||(hh>12)){return 0;}i_val+=hh.length;}else if (token=="HH"||token=="H") {hh=GetInt(val,i_val,token.length,2);if(hh==null||(hh<0)||(hh>23)){return 0;}i_val+=hh.length;}else if (token=="KK"||token=="K") {hh=GetInt(val,i_val,token.length,2);if(hh==null||(hh<0)||(hh>11)){return 0;}i_val+=hh.length;}else if (token=="kk"||token=="k") {hh=GetInt(val,i_val,token.length,2);if(hh==null||(hh<1)||(hh>24)){return 0;}i_val+=hh.length;hh--;}else if (token=="mm"||token=="m") {mm=GetInt(val,i_val,token.length,2);if(mm==null||(mm<0)||(mm>59)){return 0;}i_val+=mm.length;}else if (token=="ss"||token=="s") {ss=GetInt(val,i_val,token.length,2);if(ss==null||(ss<0)||(ss>59)){return 0;}i_val+=ss.length;}else if (token=="a") {if (val.substring(i_val,i_val+2).toLowerCase()=="am") {ampm="AM";}else if (val.substring(i_val,i_val+2).toLowerCase()=="pm") {ampm="PM";}else {return 0;}i_val+=2;}else {if (val.substring(i_val,i_val+token.length)!=token) {return 0;}else {i_val+=token.length;}}}if (i_val != val.length) { return 0; }if (month==2) {if ( ( (year%4==0)&&(year%100 != 0) ) || (year%400==0) ) { if (date > 29){ return 0; }}else { if (date > 28) { return 0; } }}if ((month==4)||(month==6)||(month==9)||(month==11)) {if (date > 30) { return 0; }}if (hh<12 && ampm=="PM") { hh=hh-0+12; }else if (hh>11 && ampm=="AM") { hh-=12; }var newdate=new Date(year,month-1,date,hh,mm,ss);return newdate.getTime();};
	// ===================================================================
	// Author: Matt Kruse <matt@mattkruse.com>
	// WWW: http://www.mattkruse.com/
	//
	// ===================================================================
	MONTH_NAMES=new Array('January','February','March','April','May','June','July','August','September','October','November','December','Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec');
	DAY_NAMES=new Array('Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sun','Mon','Tue','Wed','Thu','Fri','Sat');
	LZ = function(x) {return(x<0||x>9?"":"0")+x}
	IsDate2 = function(val,format) {var date=GetDateFromFormat(val,format);if (date==0) { return false; }return true;};
	CompareDates = function(date1,dateformat1,date2,dateformat2) {var d1=GetDateFromFormat(date1,dateformat1);var d2=GetDateFromFormat(date2,dateformat2);if (d1==0 || d2==0) {return -1;}else if (d1 > d2) {return 1;}return 0;};
	FormatDate = function(date,format) {
		format=format+"";
		var result="";
		var i_format=0;
		var c="";
		var token="";
		var y=date.getYear()+"";
		var M=date.getMonth()+1;
		var d=date.getDate();
		var E=date.getDay();
		var H=date.getHours();
		var m=date.getMinutes();
		var s=date.getSeconds();
		var yyyy,yy,MMM,MM,dd,hh,h,mm,ss,ampm,HH,H,KK,K,kk,k;
		var value=new Object();
		if (y.length < 4) {
			y = ""+(y-0+1900);
		} 
		value["y"] = ""+y;
		value["yyyy"] = y;
		value["yy"] = y.substring(2,4);
		value["M"] = M;
		value["MM"] = LZ(M);
		value["MMM"] = MONTH_NAMES[M-1];
		value["NNN"] = MONTH_NAMES[M+11];
		value["d"] = d;
		value["dd"] = LZ(d);
		value["E"] = DAY_NAMES[E+7];
		value["EE"] = DAY_NAMES[E];
		value["H"] = H;
		value["HH"] = LZ(H);
		if (H==0){
			value["h"]=12;
		} else if (H>12){
			value["h"] = H-12;
		} else {
			value["h"] = H;
		}
		value["hh"]=LZ(value["h"]);
		if (H>11){
			value["K"]=H-12;
		} else {
			value["K"]=H;
		}
		value["k"]=H+1;
		value["KK"]=LZ(value["K"]);
		value["kk"]=LZ(value["k"]);
		if (H > 11) { 
			value["a"]="PM"; 
		} else { 
			value["a"]="AM"; 
		}
		value["m"] = m;
		value["mm"] = LZ(m);
		value["s"]=s;
		value["ss"]=LZ(s);
		while (i_format < format.length) {
			c=format.charAt(i_format);
			token="";
			while ((format.charAt(i_format)==c) && (i_format < format.length)) {
				token += format.charAt(i_format++);
			}
			if (value[token] != null) { 
				result=result + value[token]; 
			} else { 
				result=result + token; 
			}
		}
		return result;
	};
	IsInteger = function(val) {var digits="1234567890";for (var i=0; i < val.length; i++) {if (digits.indexOf(val.charAt(i))==-1) { return false; }}return true;};
	GetInt = function(str,i,minlength,maxlength) {for (var x=maxlength; x>=minlength; x--) {var token=str.substring(i,i+x);if (token.length < minlength) { return null; }if (IsInteger(token)) { return token; }}return null;};
	ParseDate = function(val) {
		if (dltypeof(val) == "date") return val;
		var preferEuro=(arguments.length==2)?arguments[1]:false;
		generalFormats=new Array('y-M-d','MMM d, y','MMM d,y','y-MMM-d','d-MMM-y','MMM d');
		monthFirst=new Array('M/d/y','M-d-y','M.d.y','MMM-d','M/d','M-d');
		dateFirst =new Array('d/M/y','d-M-y','d.M.y','d-MMM','d/M','d-M');
		var checkList=new Array(generalFormats,preferEuro?dateFirst:monthFirst,preferEuro?monthFirst:dateFirst);var d=null;for (var i=0; i<checkList.length; i++) {var l=checkList[i];for (var j=0; j<l.length; j++) {d=GetDateFromFormat(val,l[j]);if (d!=0) { return new Date(d); }}}return null;}
	
	Boolean.parse = function(value){if (typeof(value)=='string'){return (value.toLowerCase()=='true');}return value ?true :false;}
	Number.parse =function(value){if (!value ||(value.length ==0)){return 0;}return parseFloat(value);}
	Number._typeName ='Number';String.prototype.endsWith =function(suffix){return (this.substr(this.length -suffix.length)==suffix);}
	
	String.prototype.startsWith =function(prefix){return (this.substr(0,prefix.length)==prefix);}
	String.prototype.trimLeft =function(){return this.replace(/^\s*/,"");}
	String.prototype.trimRight =function(){return this.replace(/\s*$/,"");}
	String.prototype.trim =function(){return this.trimRight().trimLeft();}
	String.prototype.padLeft = function(padChar, totalLength) {var thisLen = this.length;var out = this;if (thisLen < totalLength) {var diff = totalLength - thisLen;for (var i=0;i<diff;i++) {out = padChar + out;}}return out;};
	String.prototype.padRight = function(padChar, totalLength) {var thisLen = this.length;var out = this;if (thisLen < totalLength) {var diff = totalLength - thisLen;for (var i=0;i<diff;i++) {out = out + padChar;}}return out;};
	String.format =function(format){for (var i =1;i <arguments.length;i++){format =format.replace("{"+(i -1)+"}",arguments[i]);}return format;}
	String.prototype.noPX = function() {if (this.length == 0) return 0; else return parseInt(this.replace(/px/, ""));}
	String.prototype.pxAdd = function(val) {return (this.noPX() + val) + "px";}
	String._typeName ='String';
	
	/** private */
	//move = function(element, x, y) {if (y == undefined) var y = 0;if (x == undefined) var x = 0;element.style.left = element.style.left.pxAdd(y);element.style.top = element.style.top.pxAdd(x);}
	/** private */
	//moveTo = function(element, x, y) {	if (y == undefined) var y = 0;	if (x == undefined) var x = 0;element.style.left = y + "px";element.style.top = x + "px";}
	
	
	Hashtable = function() {
		this.getKeys = function() {
			return this.keys;
		}
		this.map = new Array();
		this.className = "Hashtable";
		this.length = 0;
		this.keys = new Array();
	};
	Hashtable.prototype.getItem = function(key) { return this.map[key.toLowerCase()]; };
	Hashtable.prototype.addItem =function(key, value){	
		var k = key.toLowerCase();
		this.keys[k] = k;
		this.map[k] = value;
		this.length++;
	};
	Hashtable.prototype.clear = function(){
		if (this.length >0){
			this.map.splice(0, this.length);
			this.keys.splice(0, this.keys.length);
			this.length = 0;
		}
	};
	Hashtable.prototype.clone = function(){
		var clonedArray = new Hashtable();	
		var length = this.length;
		for (key in this.map) {
			clonedArray.addItem(key, this.map[key]);
		}
		return clonedArray;
	};
	Hashtable.prototype.containsItem = function(key){
		var index = this.indexOf(key);	
		return (index >=0);
	};
	Hashtable.prototype.indexOf = function(key){
		var x = key.toLowerCase();
		var c = 0;
		for (k in this.map) {
			if (k == x){
				return c;
			}
			c++;
		}
		return -1;
	};
	Hashtable.prototype.remove = function(key){
		var k = key.toLowerCase();
		var index = this.indexOf(k);
		if (index >=0){
			this.map.splice(index,1);
			this.keys[k] == null;
			this.length--;
		}
	};
	Hashtable._typeName ='Hashtable';
	Hashtable.prototype.parse =function(value){return eval('('+value +')');}
				
	RegExp.parse =function(value){if (value.startsWith('/')){var endSlashIndex =value.lastIndexOf('/');if (endSlashIndex >1){var expression =value.substring(1,endSlashIndex);var flags =value.substr(endSlashIndex +1);return new RegExp(expression,flags);}}return null;}
	RegExp._typeName ='RegExp';
	
	Date._typeName ='Date';
</script>