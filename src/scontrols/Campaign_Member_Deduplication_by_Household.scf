<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
<title></title>
<script src="/soap/ajax/8.0/connection.js" type="text/javascript"></script>
<link href="/dCSS/Theme2/default/common.css" type="text/css"
	media="handheld,print,projection,screen,tty,tv" rel="stylesheet">
<link href="/dCSS/Theme2/default/custom.css" type="text/css"
	media="handheld,print,projection,screen,tty,tv" rel="stylesheet">

<script type="text/javascript">
	<!-- 
	/****************************************************************
	* S-Control that marks campaign members from same household with 
	* the status of "Household Member" so they can be filtered from reports
	*
	* Originally written by Steve Andersen, steve@onenw.org
	* Rewritten by Evan Callahan, evanc@npowerseattle.org
	*
	* Uses asynchronous calls in order to provide feedback and to 
	* better handle large campaigns
	*
	* Rewritten to use API 8.0 and the AJAX toolkit to fix inability to give CampaignMembers
	* a status that isn't already on the Campaign 
	*
	* Last modified: 1/18/2007
	*****************************************************************/

	/****************************************************************
	* Global variables
	*****************************************************************/
	//get CampaignID from the campaign we're coming from
	var CampaignId = "{!Campaign.Id}";
	var HouseholdMemberStatus = "Household Member";
	var status = "";
	var TotalRecs = 0;
	var TotalDone = 0;
	//array to hold the list of members in the campaign
	var CampaignMembersArray = new Array();
	//array to hold dup campaign member ids
	var DuplicateCampaignMembers = new Array();
	//array to hold the list of Households on the campaign
	var HouseholdIds = new Array();
	
	//initialize
	function initPage() {
		
		//first, check for the Household Member status
		var HouseholdCampaignMemberStatuses = sforce.connection.query("select label from CampaignMemberStatus where CampaignId = '" + CampaignId + "'");
		var StatusCount = HouseholdCampaignMemberStatuses.size;
		var NextSortOrder=parseInt(StatusCount)+1;
		var HouseholdCampaignMemberStatus = sforce.connection.query("select id from CampaignMemberStatus where CampaignId = '" + CampaignId + "' and label='" + HouseholdMemberStatus + "'");
		
		//if not there, add it
		if (HouseholdCampaignMemberStatus.size==0) {
			var CampaignMemberStatuses = new Array();
			var CampaignMemberStatus = new sforce.SObject("CampaignMemberStatus");
			//set the id to match the campaign membership id	
			CampaignMemberStatus.set("CampaignId",CampaignId);
			CampaignMemberStatus.set("label",HouseholdMemberStatus);
			CampaignMemberStatus.set("sortorder",NextSortOrder);
			//add the object to the array for updating
		  	var CampaignMemberStatusSaveResult = sforce.connection.create([CampaignMemberStatus]);
		}
		
		//STEP 1: query the members from the campaign
   		sforce.connection.batchSize = 200;
	    document.getElementById("msgContacts").innerHTML = "Loading contact data....";
	    document.getElementById("statusContacts").innerHTML = TotalDone + " of " + TotalRecs;
		sforce.connection.query("Select Id, ContactId, Contact.ONEN_Household__c,Status from CampaignMember where CampaignId = '" + CampaignId + "' and ContactId<>'' and Contact.ONEN_Household__C<>'' order by Contact.ONEN_Household__C", ProcessCampaign, true);
	}
	function ProcessCampaign(CampaignMembers) {
	
		if (CampaignMembers.size > 0) {
			//add the batch of results to the array of results
			CampaignMembersArray = CampaignMembersArray.concat(CampaignMembers.records);
			TotalRecs = CampaignMembers.size;
			TotalDone = CampaignMembersArray.length;
		    document.getElementById("statusContacts").innerHTML = TotalDone + " of " + TotalRecs;
			
			if (CampaignMembers.getBoolean("done") == false) {
				//get the next batch
				sforce.connection.queryMore(CampaignMembers.queryLocator, ProcessCampaign, true);
			} else {
			    document.getElementById("statusContacts").innerHTML = TotalDone + " of " + TotalRecs;
				//STEP 2: identify dupes and put them in an array
				//since the results are ordered by Household Id, the dupes will be contiguous
				var PreviousHousehold="";
				
				for(var Row=0;Row<CampaignMembersArray.length;Row++) {
					var ThisCampaignMember = CampaignMembersArray[Row];
					//if this household is already marked, skip it
        			if (ThisCampaignMember.Status!=HouseholdMemberStatus) {					
						var CurrentHousehold = ThisCampaignMember.Contact.ONEN_Household__c;
						//if the current contact's Household Id == that of the one before it, mark it a dupe
						if (CurrentHousehold==PreviousHousehold) {
							DuplicateCampaignMembers.push(ThisCampaignMember.Id);
						}
						PreviousHousehold=CurrentHousehold;	
					}
				}
				//process the array of dupes
				if (DuplicateCampaignMembers.length > 0) {
					//STEP 3: update status of duplicate households
					TotalDone = 0;
					TotalRecs = DuplicateCampaignMembers.length;
				    document.getElementById("msgMemberStatus").innerHTML = "Marking duplicate households....";
				    document.getElementById("statusMemberStatus").innerHTML = TotalDone + " of " + TotalRecs;
					sforce.connection.update(Get200Dupes(), Dedupe, true);
				} else {  //NO DUPES
				    document.getElementById("msgMemberStatus").innerHTML = "No duplicate households found.";
				    //redirect back to campaign
					top.location.replace("/" + CampaignId);
					//return;   //you could optionally show the result instead of redirecting				
				}
			}
		} else {
		   document.getElementById("msgContacts").innerHTML = "The campaign has no members.";
		   return;
		}
	}
	function LoadHouseholds(ContactHouseholdResult) {
		if (ContactHouseholdResult.success==false) { 
		   document.getElementById("msgHouseholds").innerHTML = "Error: " + ContactHouseholdResult.faultstring;
		   return;
		}
		//add the resulting ids to the list
		for (var Row=0; Row<ContactHouseholdResult.length;Row++) {
			var ThisResult = ContactHouseholdResult[Row];
			HouseholdIds.push(ThisResult.get("ONEN_Household__c"));
		}
		if (TotalDone < TotalRecs) {
			//get the next batch
		    document.getElementById("statusHouseholds").innerHTML = TotalDone + " of " + TotalRecs;
		    var ContactIds = Get200ContactIds();
			sforce.connection.retrieve("ONEN_Household__c","Contact",ContactIds, LoadHouseholds, true);
		} else {
			//STEP 3: generate the list of Campaign Memberships that should be marked as Household members
		    document.getElementById("msgMemberStatus").innerHTML = "Looking for duplicate households....";
		    document.getElementById("statusMemberStatus").innerHTML = "";
	
			//array to tally Households as we find them on the campaign
			var UsedHouseholds = new Array();

			for (var Row=0; Row<HouseholdIds.length;Row++) {
				var ThisCampaignMember = CampaignMembersArray[Row].get("Id");
				var ThisContactHousehold = HouseholdIds[Row];
				if (ThisContactHousehold!=null) {
					if (UsedHouseholds[ThisContactHousehold]==undefined) {
						//if this is the first time we're seeing a household, add it to the list of households
						UsedHouseholds[ThisContactHousehold]=ThisContactHousehold;
					} else {
						//if the household id is in the list of households already represented, mark this member as household duplicate
						DuplicateCampaignMembers.push(ThisCampaignMember);
					}
				}
			}

			if (DuplicateCampaignMembers.length > 0) {
				//STEP 4: update status of duplicate households
				TotalDone = 0;
				TotalRecs = DuplicateCampaignMembers.length;
			    document.getElementById("msgMemberStatus").innerHTML = "Marking duplicate households....";
			    document.getElementById("statusMemberStatus").innerHTML = TotalDone + " of " + TotalRecs;
				sforce.connection.update(Get200Dupes(), Dedupe, true);
			} else {  //NO DUPES
			    document.getElementById("msgMemberStatus").innerHTML = "No duplicate households found.";
			    //redirect back to campaign
				top.location.replace("/" + CampaignId);
				//return;   //you could optionally show the result instead of redirecting				
			}
		}
	}
	function Dedupe(DedupeResult) {
		if (DedupeResult.success==false) { 
		   document.getElementById("msgMemberStatus").innerHTML = "Error: " + ContactHouseholdResult.faultstring;
		   return;
		}

		if (DuplicateCampaignMembers.length!=0) {
			//get the next batch
			TotalDone += 200;
			document.getElementById("statusMemberStatus").innerHTML = TotalDone + " of " + TotalRecs;
			sforce.connection.update(Get200Dupes(), Dedupe, true);
		} else { //DONE
			
			document.getElementById("statusMemberStatus").innerHTML = TotalRecs + " of " + TotalRecs;
		    //redirect back to campaign
			top.location.replace("/" + CampaignId);
			//return;   //you could optionally show the result instead of redirecting				
		}
	}
		
	/****************************************************************
	* Returns an array of up to 200 records to mark as dupes
	*****************************************************************/
	function Get200Dupes() {					
		// Array for member objects to update
		var DedupeHouseholdMembers = new Array();
		
		while (DuplicateCampaignMembers.length!=0 && DedupeHouseholdMembers.length<200) {
			//create the object for campaign member
			var CampaignMember = new sforce.SObject('CampaignMember');
			//set the id to match the campaign membership id	
				
			CampaignMember.set("Id",DuplicateCampaignMembers.pop());
			CampaignMember.set("Status","Household Member");
			//add the object to the array for updating
			DedupeHouseholdMembers.push(CampaignMember);
		}

		return DedupeHouseholdMembers;
	}

		</script>
</head>
<body onload="initPage()" class="campaign overviewPage">
<a name="skiplink"><img src="/s.gif" height='1' width='1'
	alt="Content Starts Here" class="skiplink"></a>
<div class="bPageTitle">
<div class="ptBody secondaryPalette">
<div class="content"><img src="/s.gif" alt="Lookup"
	class="pageTitleIcon">
<h1 class="pageType noSecondHeader">Campaign Member Deduplication</h1>
<div class="blank">&nbsp;</div>
</div>
</div>
<div class="bDescription">
<p>This tool searches members of the current campaign. If any
household has more than one contact in the campaign, the duplicate
members are marked with the special campaign status of "Household
Member." To produce a mailing list of unique households, filter for
records that don't have this status.</p>
<p><span id="msgContacts">Loading campaign members....</span> <span
	id="statusContacts"></span></p>
<p><span id="msgHouseholds"></span> <span id="statusHouseholds"></span></p>
<p><span id="msgMemberStatus"></span> <span id="statusMemberStatus"></span>
</p>
</div>
</body>
</html>